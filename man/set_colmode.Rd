% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/set_colmode.R
\name{set_colmode}
\alias{set_colmode}
\title{Set storage mode of all columns in a data.frame}
\usage{
set_colmode(df, cl)
}
\arguments{
\item{df}{\code{data.frame}}

\item{cl}{\code{character} vector with the names of the storage mode for each column
in \code{df}. Its length must be the same as the number of column in \code{df}.
Accepted strings are "character", "integer", "double" or "numeric" (they are equivalent)
"logical", "complex", "raw" and "date".}
}
\value{
The input \code{df} data.frame with the storage.mode of its columns modified.
}
\description{
Function \code{set_colmode} allows to set the storage mode of all columns in a
\code{data.frame} in one step.
}
\details{
Simple implementation of conversion functions \code{as.character}, \code{as.integer},
\code{as.double}, \code{logical}, \code{as.complex}, \code{as.raw} and \code{as.Date}.

NB! It is not possible to specify which \code{format} to apply in the "date" conversion.
That may yield unwanted \code{Date} results if the input format is not the standard
\%Y-\%m-\%d. Rather than converting all columns in one sweep, keep the column with the
date as a character and convert it afterwards (see Example below).#'
}
\examples{
# Simple example.
df <- data.frame(a=1:4, b=letters[1:4])
print(sapply(df, typeof))
print(sapply(set_colmode(df, c("character", "character")), typeof))

#More complicated.
df <-


}
