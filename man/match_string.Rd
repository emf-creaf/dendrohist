% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/match_string.R
\name{match_string}
\alias{match_string}
\title{Pattern matching}
\usage{
match_string(
  pattern,
  text,
  ignore.case = T,
  remove.accent = T,
  reverse = F,
  verbose = F
)
}
\arguments{
\item{pattern}{a character vector whose elements containing regular expressions to be matched in \code{y}.}

\item{text}{a character vector where matches are sought. If \code{reverse = T} a further search
is performed where the roles of \code{x} and \code{y} are swapped.}

\item{ignore.case}{logical, if set to TRUE letter cases are ignored. Default is TRUE.}

\item{remove.accent}{logical, if set to TRUE diacritics and tilde letters are substituted
by the plain versions. Default is FALSE.}

\item{reverse}{logical, if set to TRUE search is also carried out in reverse mode. Default is FALSE.}

\item{verbose}{logical, if set to TRUE a progress bar is printed. Default is FALSE.}

\item{match}{logical, if set to TRUE matches will be carried out with the \link[base]{match} function;
otherwise, \link[base]{regexpr} will be used.}
}
\value{
A \code{list} object with the same length as \code{pattern}. Each element of the output consists of a
\code{data.frame} with two columns: \code{index} and \code{reverse}. The former indicates the index
of the first match of the corresponding 'pattern' in vector 'text'. The latter shows whether the match was
found in a direct search or a reverse one.
}
\description{
A match is sought between two character vectors containing regular expressions.
If set, search is case-independent, diacritics and tildes are not considered and
a reverse is carried out when there is no match.
}
\details{
Simple implementation of the \link[base]{match} or \link[base]{regexpr} functions.
Notice that the output will be different in either case. See Examples below.
}
\examples{
x <- c("Buho", "azúcar", "Prague", "Momentum")
y <- c("Búho búsqueda de piñatas exóticas con él",
"Stop all the clocks",
"Azucarillo",
"Tráigaselo rápido al marqués con muchísimo azúcar",
"le pont d'avignon n'est pas terminé",
"Mom")
print(match_string(x, y))
print(match_string(x, y, match = F))

}
